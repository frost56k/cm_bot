from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from services.order_service import create_pickup_order, create_europochta_order, issue_order
from services.cart_service import get_user_cart, clear_cart
from utils.utils import format_cart
from states.states import OrderStates

router = Router()

class OrderStatesGroup(StatesGroup):
    waiting_for_comment = State()
    waiting_for_recipient_name = State()
    waiting_for_post_office_number = State()

@router.callback_query(F.data == "checkout")
async def checkout_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    cart = await get_user_cart(user_id)
    
    if not cart:
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="coffee_catalog")]
            ])
        )
        await callback.message.delete()
        await callback.answer()
        return
    
    total = sum(float(item["price"].replace(" —Ä—É–±.", "")) for item in cart)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å item.price –Ω–∞ item["price"]
    checkout_text = (
        f"*–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.*\n"
        f"\n"
        f"{format_cart(cart)}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n"
        f"–°–∞–º–æ–≤—ã–≤–æ–∑. –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π\n"
        f"–ï–≤—Ä–æ–ø–æ—á—Ç–∞. –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –ø–æ—á—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="pickup_cash"),
            InlineKeyboardButton(text="–ï–≤—Ä–æ–ø–æ—á—Ç–∞", callback_data="europochta_send")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="view_cart")
        ]
    ])
    
    await callback.bot.send_message(
        chat_id=callback.message.chat.id,
        text=checkout_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data == "pickup_cash")
async def pickup_cash_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart = await get_user_cart(user_id)
    
    if not cart:
        await callback.bot.send_message(callback.message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        await callback.message.delete()
        await callback.answer()
        return
    
    total = sum(float(item["price"].replace(" —Ä—É–±.", "")) for item in cart)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å item.price –Ω–∞ item["price"]
    order_text = (
        f"üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n"
        f"{format_cart(cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total:.2f} —Ä—É–±.\n\n"
        f"‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞) "
        f"–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω:"
    )
    
    await callback.bot.send_message(
        chat_id=callback.message.chat.id,
        text=order_text,
        parse_mode="Markdown"
    )
    
    await state.update_data(cart=cart, total=total, user_id=user_id)
    await state.set_state(OrderStatesGroup.waiting_for_comment)
    await callback.message.delete()
    await callback.answer()

@router.message(OrderStatesGroup.waiting_for_comment)
async def process_order_comment(message: Message, state: FSMContext):
    user_id = message.from_user.id
    comment = message.text.strip()
    
    data = await state.get_data()
    cart = data["cart"]
    total = data["total"]
    
    order_number = await create_pickup_order(user_id, message.bot, comment, cart, total)
    await state.clear()

@router.callback_query(F.data == "europochta_send")
async def europochta_send_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cart = await get_user_cart(user_id)
    
    if not cart:
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="coffee_catalog")]
            ])
        )
        await callback.message.delete()
        await callback.answer()
        return
    
    await callback.bot.send_message(
        chat_id=callback.message.chat.id,
        text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"
    )
    await state.set_state(OrderStatesGroup.waiting_for_recipient_name)
    await callback.message.delete()
    await callback.answer()

@router.message(OrderStatesGroup.waiting_for_recipient_name)
async def process_recipient_name(message: Message, state: FSMContext):
    recipient_name = message.text.strip()
    await state.update_data(recipient_name=recipient_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø–æ—á—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—É–ª. –õ–µ–Ω–∏–Ω–∞ 10, –æ—Ç–¥–µ–ª–µ–Ω–∏–µ 123'):")
    await state.set_state(OrderStatesGroup.waiting_for_post_office_number)

@router.message(OrderStatesGroup.waiting_for_post_office_number)
async def process_post_office_number(message: Message, state: FSMContext):
    user_input = message.text.strip()
    data = await state.get_data()
    recipient_name = data["recipient_name"]
    user_id = message.from_user.id
    cart = await get_user_cart(user_id)
    total = sum(float(item["price"].replace(" —Ä—É–±.", "")) for item in cart)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å item.price –Ω–∞ item["price"]
    
    try:
        address, post_office_number = [part.strip() for part in user_input.split(",", 1)]
        if not address or not post_office_number:
            raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏ –∞–¥—Ä–µ—Å, –∏ –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç–æ–π.")
    except ValueError as e:
        await message.answer(str(e) if str(e) else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–∞–¥—Ä–µ—Å, –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è'.")
        return
    
    order_number = await create_europochta_order(user_id, message.bot, recipient_name, address, post_office_number, cart, total)
    await state.clear()

@router.callback_query(F.data.startswith("issue_order_"))
async def confirm_issue_order(callback: CallbackQuery):
    order_number = callback.data.split("_")[2]
    confirm_text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–¥–∞—á—É –∑–∞–∫–∞–∑–∞ ‚Ññ{order_number}?"
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_issue_{order_number}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_issue")]
    ])
    await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text=confirm_text,
        reply_markup=confirm_keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_issue_"))
async def issue_order_confirmed(callback: CallbackQuery):
    order_number = callback.data.split("_")[2]
    await issue_order(order_number, callback.bot)
    await callback.answer()

@router.callback_query(F.data == "cancel_issue")
async def cancel_issue(callback: CallbackQuery):
    await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text="–í—ã–¥–∞—á–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    )
    await callback.answer()