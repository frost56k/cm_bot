# services/order_service.py
import aiofiles
from models.models import Order, CartItem
from storage.orders_storage import generate_order_number, save_pending_order
from storage.conversations_storage import get_user_cart, clear_cart
from config.config import ADMIN_ID, PENDING_ORDERS_FILE
import json
import logging
from datetime import datetime
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


logger = logging.getLogger(__name__)

async def create_pickup_order(user_id: int, bot: Bot, comment: str, cart: list[CartItem], total: float) -> str:
    order_number = await generate_order_number()
    order = Order(
        order_number=order_number,
        user_id=user_id,
        full_name="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        username=None,  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        cart=cart,
        payment_method="–°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)",
        total=total,
        comment=comment if comment.lower() != "–Ω–µ—Ç" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
        issued=False,
        issue_date=None
    )
    
    order_data = order.__dict__
    await save_pending_order(order_data)
    
    user_order_text = (
        f"‚úÖ *–ó–∞–∫–∞–∑ ‚Ññ{order_number} –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n"
        f"üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n"
        f"{''.join(f'- {item.name} ({item.weight}–≥) - {item.price}\n' for item in cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}\n"
        f"–ó–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ –∞–¥—Ä–µ—Å—É: –≥–æ—Ä–æ–¥ –ú–∏–Ω—Å–∫ —É–ª. –ù–µ–∂–¥–∞–Ω–æ–≤–æ–π –¥. 37 –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ø—è—Ç–Ω–∏—Ü–∞ 9-17 —á–∞—Å–æ–≤\n"
        f"–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏."
    )
    
    await bot.send_message(
        chat_id=user_id,
        text=user_order_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_shop_from_order")]
        ])
    )
    
    admin_text = (
        f"üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_number}!*\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.full_name} (ID: {user_id}, @{order.username})\n"
        f"üõí *–ó–∞–∫–∞–∑:*\n"
        f"{''.join(f'- {item.name} ({item.weight}–≥) - {item.price}\n' for item in cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
        f"–°—É–º–º–∞: {total:.2f} —Ä—É–±.\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}"
    )
    
    await bot.send_message(
        chat_id=ADMIN_ID,
        text=admin_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"issue_order_{order_number}")]
        ])
    )
    
    await clear_cart(user_id, restore_quantity=False)
    logger.info(f"–ó–∞–∫–∞–∑ ‚Ññ{order_number} —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return order_number

async def create_europochta_order(user_id: int, bot: Bot, recipient_name: str, address: str, post_office_number: str, cart: list[CartItem], total: float) -> str:
    order_number = await generate_order_number()
    order = Order(
        order_number=order_number,
        user_id=user_id,
        full_name="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        username=None,  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        cart=cart,
        payment_method="–ï–≤—Ä–æ–ø–æ—á—Ç–∞ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)",
        total=total,
        recipient_name=recipient_name,
        address=address,
        post_office_number=post_office_number,
        issued=False,
        issue_date=None
    )
    
    order_data = order.__dict__
    await save_pending_order(order_data)
    
    order_text = (
        f"‚úÖ *–ó–∞–∫–∞–∑ ‚Ññ{order_number} –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n"
        f"üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n"
        f"{''.join(f'- {item.name} ({item.weight}–≥) - {item.price}\n' for item in cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ï–≤—Ä–æ–ø–æ—á—Ç–∞ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_name}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è: {post_office_number}\n"
        f"–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏ –ø–æ—á—Ç—ã."
    )
    
    await bot.send_message(
        chat_id=user_id,
        text=order_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="coffee_catalog")]
        ])
    )
    
    admin_text = (
        f"üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_number}!*\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.full_name} (ID: {user_id}, @{order.username})\n"
        f"üõí *–ó–∞–∫–∞–∑:*\n"
        f"{''.join(f'- {item.name} ({item.weight}–≥) - {item.price}\n' for item in cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ï–≤—Ä–æ–ø–æ—á—Ç–∞ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_name}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è: {post_office_number}\n"
        f"–°—É–º–º–∞: {total:.2f} —Ä—É–±."
    )
    
    await bot.send_message(
        chat_id=ADMIN_ID,
        text=admin_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"issue_order_{order_number}")]
        ])
    )
    
    await clear_cart(user_id, restore_quantity=False)
    logger.info(f"–ó–∞–∫–∞–∑ ‚Ññ{order_number} —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return order_number

async def issue_order(order_number: str, bot: Bot) -> None:
    try:
        async with aiofiles.open(PENDING_ORDERS_FILE, 'r', encoding='utf-8') as f:
            content = await f.read()
            pending_orders = json.loads(content) if content else {"orders": []}
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {PENDING_ORDERS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    order_data = next((order for order in pending_orders["orders"] if order["order_number"] == order_number), None)
    if not order_data:
        logger.error(f"–ó–∞–∫–∞–∑ ‚Ññ{order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–∞—Ö!")
        return

    order_data["issued"] = True
    order_data["issue_date"] = datetime.now().isoformat()

    async with aiofiles.open("order_history.json", 'r', encoding='utf-8') as f:
        content = await f.read()
        history = json.loads(content) if content else {"orders": []}
    history["orders"].append(order_data)

    async with aiofiles.open("order_history.json", 'w', encoding='utf-8') as f:
        await f.write(json.dumps(history, ensure_ascii=False, indent=2))

    pending_orders["orders"] = [order for order in pending_orders["orders"] if order["order_number"] != order_number]
    async with aiofiles.open(PENDING_ORDERS_FILE, 'w', encoding='utf-8') as f:
        await f.write(json.dumps(pending_orders, ensure_ascii=False, indent=2))

    await bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_number} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é."
    )
    logger.info(f"–ó–∞–∫–∞–∑ ‚Ññ{order_number} –≤—ã–¥–∞–Ω –∏ –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é")