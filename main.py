import os
import json
import logging
from datetime import datetime
from typing import Dict, Any
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from openai import OpenAI
from dotenv import load_dotenv
import time
import aiofiles
from aiogram.types import BotCommand
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class OrderStates(StatesGroup):
    waiting_for_comment = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
CONVERSATIONS_FILE = "conversations.json"
BOT_MIND_FILE = "bot_mind.json"
ADMIN_ID = 222467350  # –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

if not os.path.exists(CONVERSATIONS_FILE):
    with open(CONVERSATIONS_FILE, 'w') as f:
        json.dump({}, f)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ OpenAI
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à
conversations_cache = {}

def load_bot_mind() -> str:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏–∑ bot_mind.json"""
    try:
        with open(BOT_MIND_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return json.dumps(data, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Error loading bot mind: {e}")
        return ""  

async def load_conversations_to_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –∫—ç—à"""
    global conversations_cache
    try:
        async with aiofiles.open(CONVERSATIONS_FILE, 'r', encoding='utf-8') as f:
            content = await f.read()
            conversations_cache = json.loads(content) if content else {}
        logger.info("–ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—ç—à–∞: {e}")
        conversations_cache = {}

async def save_conversations_from_cache():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –≤ —Ñ–∞–π–ª"""
    try:
        async with aiofiles.open(CONVERSATIONS_FILE, 'w', encoding='utf-8') as f:
            await f.write(json.dumps(conversations_cache, indent=4, ensure_ascii=False))
        logger.info("–ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")

async def periodic_save():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è"""
    while True:
        await asyncio.sleep(30)  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
        await save_conversations_from_cache()
        logger.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

async def get_conversation(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ –∫—ç—à–∞"""
    return conversations_cache.get(str(user_id), {})

async def save_conversation(user_id: int, data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
    conversations_cache[str(user_id)] = data
    logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def update_chat_history(user_id: int, message: str, role: str = "user"):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    conversation = await get_conversation(user_id) or {"user_info": {}, "messages": []}
    conversation["messages"].append({
        "role": role,
        "message": message,
        "timestamp": datetime.now().isoformat()
    })
    if len(conversation["messages"]) > 20:
        conversation["messages"] = conversation["messages"][-20:]
    await save_conversation(user_id, conversation)
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {conversation}")

async def on_shutdown(dp: Dispatcher):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—ç—à –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    await save_conversations_from_cache()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∫—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

async def get_user_cart(user_id: int) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
    conversation = await get_conversation(user_id) or {"user_info": {}, "messages": [], "cart": []}
    return conversation.get("cart", [])

async def add_to_cart(user_id: int, coffee_index: int, weight: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–µ—Å–∞"""
    conversation = await get_conversation(user_id) or {"user_info": {}, "messages": [], "cart": []}
    if "cart" not in conversation:
        conversation["cart"] = []
    
    with open(BOT_MIND_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)
        coffee_list = data.get("coffee_shop", [])
        coffee = coffee_list[coffee_index]
    
    quantity_key = f"quantity_{weight}g"
    price_key = f"price_{weight}g"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è
    if coffee[quantity_key] <= 0 or coffee[price_key] is None:
        raise ValueError("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –≤–µ—Å–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    cart_item = {
        "coffee_index": coffee_index,
        "name": coffee["name"],
        "weight": weight,
        "price": coffee[price_key]
    }
    conversation["cart"].append(cart_item)
    await save_conversation(user_id, conversation)
    
    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    coffee[quantity_key] -= 1
    with open(BOT_MIND_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É: {cart_item}, –æ—Å—Ç–∞–ª–æ—Å—å {weight}–≥: {coffee[quantity_key]}")
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∫—ç—à–µ: {conversation['cart']}")

async def clear_cart(user_id: int):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–µ—Å–∞"""
    conversation = await get_conversation(user_id) or {"user_info": {}, "messages": [], "cart": []}
    if "cart" not in conversation or not conversation["cart"]:
        return
    
    with open(BOT_MIND_FILE, 'r', encoding='utf-8') as f:
        data = json.load(f)
        coffee_list = data.get("coffee_shop", [])
    
    for item in conversation["cart"]:
        coffee_index = item["coffee_index"]
        weight = item["weight"]
        coffee = coffee_list[coffee_index]
        quantity_key = f"quantity_{weight}g"
        coffee[quantity_key] += 1
    
    conversation["cart"] = []
    await save_conversation(user_id, conversation)
    
    with open(BOT_MIND_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ")

def format_cart(cart: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not cart:
        return "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
    
    total = 0
    cart_text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
    for item in cart:
        cart_text += f"- {item['name']} ({item['weight']}–≥) - {item['price']}\n"
        total += float(item['price'].replace(" —Ä—É–±.", ""))
    cart_text += f"\n*–ò—Ç–æ–≥–æ:* {total:.2f} —Ä—É–±."
    return cart_text

dp.shutdown.register(on_shutdown)

@dp.message(Command("start"))
async def start_handler(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    user = msg.from_user
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –Ø ‚Äî –ö–æ—Ñ–µ –ú–∞—Å—Ç–µ—Ä, –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –∫–æ—Ñ–µ–º–∞—à–∏–Ω. üõ†Ô∏è\n\n"
        f"–ù–∞—à —á–∞—Ç-–±–æ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ï—Å–ª–∏ —É–≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫–∏, –ø–∏—à–∏—Ç–µ: coffeemasterbel@gmail.com\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /coffeeshop, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–æ—Ñ–µ."
    )
    await msg.answer(welcome_text)
    if str(user.id) not in conversations_cache:
        conversations_cache[str(user.id)] = {
            "user_info": {
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name
            },
            "messages": []
        }
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

async def send_typing_indicator(chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    while True:
        await bot.send_chat_action(chat_id, "typing")
        await asyncio.sleep(10)

def get_coffee_catalog_keyboard(coffee_list):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∫–æ—Ñ–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –Ω–∞–ª–∏—á–∏–µ"""
    keyboard = []
    for coffee in coffee_list:
        total_quantity = coffee["quantity_250g"] + coffee["quantity_1000g"]
        keyboard.append([
            InlineKeyboardButton(
                text=f"{coffee['name']} (–≤ –Ω–∞–ª–∏—á–∏–∏: {total_quantity})",
                callback_data=f"coffee_{coffee_list.index(coffee)}"
            )
        ])
    keyboard.append([
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_coffee_detail_keyboard(coffee_index):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤–µ—Å–∞ –∏ –∫–æ—Ä–∑–∏–Ω–æ–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="250–≥", callback_data=f"weight_{coffee_index}_250"),
            InlineKeyboardButton(text="1000–≥", callback_data=f"weight_{coffee_index}_1000")
        ],
        [
            InlineKeyboardButton(text="–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="coffee_catalog")
        ]
    ])
    return keyboard

@dp.callback_query(lambda c: c.data.startswith("coffee_") and c.data.split("_")[1].isdigit())
async def process_coffee_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ"""
    coffee_index = int(callback.data.split("_")[1])
    try:
        with open(BOT_MIND_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            coffee_list = data.get("coffee_shop", [])
        
        if coffee_index >= len(coffee_list):
            await callback.answer("–ö–æ—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        coffee = coffee_list[coffee_index]
        coffee_info = (
            f"‚òï *{coffee['name']}*\n\n"
            f"{coffee['description']}\n\n"
            f"–¶–µ–Ω–∞ –∏ –Ω–∞–ª–∏—á–∏–µ:\n"
            f"250–≥ - {coffee['price_250g']} (–≤ –Ω–∞–ª–∏—á–∏–∏: {coffee['quantity_250g']})\n"
            f"1000–≥ - {coffee['price_1000g'] if coffee['price_1000g'] else '–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'} "
            f"(–≤ –Ω–∞–ª–∏—á–∏–∏: {coffee['quantity_1000g']})"
        )
        
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=coffee["image_url"],
            caption=coffee_info,
            parse_mode="Markdown",
            reply_markup=get_coffee_detail_keyboard(coffee_index)
        )
        await callback.message.delete()
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ—Ñ–µ: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

@dp.callback_query(lambda c: c.data.startswith("weight_"))
async def process_weight_selection(callback: CallbackQuery):
    try:
        parts = callback.data.split("_")
        coffee_index = int(parts[1])
        weight = parts[2]
        user_id = callback.from_user.id
        
        with open(BOT_MIND_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            coffee_list = data.get("coffee_shop", [])
        
        if coffee_index >= len(coffee_list):
            await callback.answer("–ö–æ—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        coffee = coffee_list[coffee_index]
        price_key = f"price_{weight}g"
        price = coffee.get(price_key)
        
        if price is None:
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text="–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–æ—Ñ–µ", callback_data=f"coffee_{coffee_index}")]
                ])
            )
            await callback.message.delete()
            await callback.answer()
            return
        
        confirmation = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"*{coffee['name']}* ({weight}–≥) - {price}"
        )
        
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=f"add_to_cart_{coffee_index}_{weight}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"back_to_details_{coffee_index}")
            ]
        ])
        
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=confirmation,
            parse_mode="Markdown",
            reply_markup=confirm_keyboard
        )
        await callback.message.delete()
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–µ—Å–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
        await bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–µ—Å–∞.")

@dp.callback_query(lambda c: c.data.startswith("back_to_details_") and len(c.data.split("_")) > 3 and c.data.split("_")[3].isdigit())
async def back_to_coffee_details(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ç–∞–ª—è–º –∫–æ—Ñ–µ"""
    try:
        parts = callback.data.split("_")
        coffee_index = int(parts[3])
        
        with open(BOT_MIND_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            coffee_list = data.get("coffee_shop", [])
        
        if coffee_index >= len(coffee_list):
            await callback.answer("–ö–æ—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        coffee = coffee_list[coffee_index]
        coffee_info = (
            f"‚òï *{coffee['name']}*\n\n"
            f"{coffee['description']}\n\n"
            f"–¶–µ–Ω–∞ –∏ –Ω–∞–ª–∏—á–∏–µ:\n"
            f"250–≥ - {coffee['price_250g']} (–≤ –Ω–∞–ª–∏—á–∏–∏: {coffee['quantity_250g']})\n"
            f"1000–≥ - {coffee['price_1000g'] if coffee['price_1000g'] else '–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'} "
            f"(–≤ –Ω–∞–ª–∏—á–∏–∏: {coffee['quantity_1000g']})"
        )
        
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=coffee["image_url"],
            caption=coffee_info,
            parse_mode="Markdown",
            reply_markup=get_coffee_detail_keyboard(coffee_index)
        )
        await callback.message.delete()
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–µ—Ç–∞–ª—è–º: {e}")
        await bot.send_message(callback.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–µ—Ç–∞–ª—è–º: {str(e)}")
        
    except FileNotFoundError as e:
        logger.error(f"–§–∞–π–ª {BOT_MIND_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        await callback.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await bot.send_message(callback.message.chat.id, f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö ({BOT_MIND_FILE}) –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ {BOT_MIND_FILE}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        await bot.send_message(callback.message.chat.id, f"–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ {BOT_MIND_FILE}!")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–µ—Ç–∞–ª—è–º: {e}")
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        await bot.send_message(callback.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–µ—Ç–∞–ª—è–º: {str(e)}")        

@dp.callback_query(lambda c: c.data.startswith("add_to_cart_"))
async def add_to_cart_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        parts = callback.data.split("_")
        coffee_index = int(parts[3])
        weight = parts[4]
        user_id = callback.from_user.id
        
        with open(BOT_MIND_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            coffee_list = data.get("coffee_shop", [])
            coffee = coffee_list[coffee_index]
       # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Å–∞
        quantity_key = f"quantity_{weight}g"
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if coffee.get(quantity_key, 0) <= 0:
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text="–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="coffee_catalog")]
                ])
            )
            await callback.message.delete()
            await callback.answer()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        await add_to_cart(user_id, coffee_index, weight)
        await save_conversations_from_cache()
        
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"*{coffee['name']}* ({weight}–≥) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n–û—Å—Ç–∞–ª–æ—Å—å: {coffee[quantity_key] - 1}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í –∫–æ—Ä–∑–∏–Ω—É", callback_data="view_cart")],
                [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"back_to_details_{coffee_index}")]
            ])
        )
        await callback.message.delete()
        await callback.answer()
    except ValueError as e:
        await bot.send_message(callback.message.chat.id, str(e))
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
async def add_to_cart_handler(callback: CallbackQuery):
    try:
        coffee_index = int(callback.data.split("_")[3])  # –ò–∑–º–µ–Ω–∏–ª–∏ [2] –Ω–∞ [3]
        logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ç–∞–ª—è–º –∫–æ—Ñ–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º: {coffee_index}")
        
        with open(BOT_MIND_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            coffee_list = data.get("coffee_shop", [])
        
        if coffee_index >= len(coffee_list):
            await callback.answer("–ö–æ—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        coffee = coffee_list[coffee_index]
        coffee_info = (
            f"‚òï *{coffee['name']}*\n\n"
            f"{coffee['description']}\n\n"
            f"–¶–µ–Ω–∞:\n"
            f"250–≥ - {coffee['price_250g']}\n"
            f"1000–≥ - {coffee['price_1000g']}"
        )
        
        await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=coffee["image_url"],
            caption=coffee_info,
            parse_mode="Markdown",
            reply_markup=get_coffee_detail_keyboard(coffee_index)
        )
        await callback.message.delete()
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–µ—Ç–∞–ª—è–º: {e}")
        await callback.answer("–û—à–∏–±–∫–∞!")
        await bot.send_message(callback.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–µ—Ç–∞–ª—è–º.")

@dp.callback_query(F.data == "view_cart")
async def view_cart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = callback.from_user.id
    cart = await get_user_cart(user_id)
    
    cart_text = format_cart(cart)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data="checkout"),
            InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="coffee_catalog")
        ]
    ])
    
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=cart_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.message.delete()
    await callback.answer()

@dp.callback_query(F.data == "checkout")
async def checkout_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    user_id = callback.from_user.id
    cart = await get_user_cart(user_id)
    
    if not cart:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="coffee_catalog")]
            ])
        )
        await callback.message.delete()
        await callback.answer()
        return
    
    total = sum(float(item["price"].replace(" —Ä—É–±.", "")) for item in cart)
    checkout_text = (
        f"üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n"
        f"{format_cart(cart)}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)", callback_data="pickup_cash"),
            InlineKeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω)", callback_data="pickup_online")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="view_cart")
        ]
    ])
    
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=checkout_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.message.delete()
    await callback.answer()

@dp.callback_query(F.data == "pickup_cash")
async def pickup_cash_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å –æ–ø–ª–∞—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"""
    user_id = callback.from_user.id
    cart = await get_user_cart(user_id)
    
    if not cart:
        await bot.send_message(callback.message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        await callback.message.delete()
        await callback.answer()
        return
    
    total = sum(float(item["price"].replace(" —Ä—É–±.", "")) for item in cart)
    order_text = (
        f"üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n"
        f"{format_cart(cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total:.2f} —Ä—É–±.\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞) "
        f"–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω:"
    )
    
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=order_text,
        parse_mode="Markdown"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    await state.update_data(cart=cart, total=total, user_id=user_id)
    await state.set_state(OrderStates.waiting_for_comment)
    
    await callback.message.delete()
    await callback.answer()

@dp.message(OrderStates.waiting_for_comment)
async def process_order_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user_id = message.from_user.id
    comment = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cart = data["cart"]
    total = data["total"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if comment.lower() == "–Ω–µ—Ç":
        comment = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    
    order_text = (
        f"‚úÖ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n"
        f"{format_cart(cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total:.2f} —Ä—É–±.\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
        f"–ó–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ –∞–¥—Ä–µ—Å—É: –≥–æ—Ä–æ–¥ –ú–∏–Ω—Å–∫ —É–ª. –ù–µ–∂–¥–∞–Ω–æ–≤–æ–π –¥. 37 –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ø—è—Ç–Ω–∏—Ü–∞ 9-17 —á–∞—Å–æ–≤ \n"
        f"–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏."
    )
    
    await bot.send_message(
        chat_id=message.chat.id,
        text=order_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="coffee_catalog")]
        ])
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_text = (
        f"üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{message.from_user.username})\n"
        f"{format_cart(cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
        f"–°—É–º–º–∞: {total:.2f} —Ä—É–±.\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    )
    
    try:
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await clear_cart(user_id)
    await save_conversations_from_cache()
    await state.clear()

@dp.message(OrderStates.waiting_for_comment)
async def process_order_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user_id = message.from_user.id
    comment = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cart = data["cart"]
    total = data["total"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if comment.lower() == "–Ω–µ—Ç":
        comment = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    
    order_text = (
        f"‚úÖ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n"
        f"{format_cart(cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total:.2f} —Ä—É–±.\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
        f"–ó–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ –∞–¥—Ä–µ—Å—É: –≥–æ—Ä–æ–¥ –ú–∏–Ω—Å–∫ —É–ª. –ù–µ–∂–¥–∞–Ω–æ–≤–æ–π –¥. 37 –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ø—è—Ç–Ω–∏—Ü–∞ 9-17 —á–∞—Å–æ–≤ \n"
        f"–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏."
    )
    
    await bot.send_message(
        chat_id=message.chat.id,
        text=order_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="coffee_catalog")]
        ])
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_text = (
        f"üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{message.from_user.username})\n"
        f"{format_cart(cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
        f"–°—É–º–º–∞: {total:.2f} —Ä—É–±.\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    )
    
    try:
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await clear_cart(user_id)
    await save_conversations_from_cache()
    await state.clear()        

@dp.callback_query(F.data == "pickup_online")
async def pickup_online_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å –æ–ø–ª–∞—Ç–æ–π –æ–Ω–ª–∞–π–Ω"""
    user_id = callback.from_user.id
    cart = await get_user_cart(user_id)
    
    if not cart:
        await bot.send_message(callback.message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    total = sum(float(item["price"].replace(" —Ä—É–±.", "")) for item in cart)
    payment_url = "https://example.com/payment_stub"  # –°–∞–π—Ç-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    order_text = (
        f"üõí *–í–∞—à –∑–∞–∫–∞–∑:*\n"
        f"{format_cart(cart)}\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–∞–º–æ–≤—ã–≤–æ–∑ (–æ–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω)\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total:.2f} —Ä—É–±.\n\n"
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_url}"
    )
    
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=order_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="coffee_catalog")]
        ])
    )
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É (–∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
    await clear_cart(user_id)
    await save_conversations_from_cache()
    
    await callback.message.delete()
    await callback.answer()    
    
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=order_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="coffee_catalog")]
        ])
    )
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    await clear_cart(user_id)
    await save_conversations_from_cache()
    
    await callback.message.delete()
    await callback.answer()    

@dp.message(Command("cart"))
async def cart_handler(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cart"""
    user_id = msg.from_user.id
    cart = await get_user_cart(user_id)
    
    cart_text = format_cart(cart)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="coffee_catalog")
        ]
    ])
    
    await msg.answer(
        text=cart_text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "clear_cart")
async def clear_cart_handler(callback: CallbackQuery):
    """–û—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
    user_id = callback.from_user.id
    cart = await get_user_cart(user_id)
    if not cart:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="coffee_catalog")]
            ])
        )
    else:
        await clear_cart(user_id)
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞, —Ç–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –Ω–∞–ª–∏—á–∏–µ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="coffee_catalog")]
            ])
        )
    await callback.message.delete()
    await callback.answer()

@dp.message(Command("coffeeshop"))
async def coffeeshop_handler(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /coffeeshop —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∫–æ—Ñ–µ"""
    try:
        with open(BOT_MIND_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            coffee_list = data.get("coffee_shop", [])
        
        if not coffee_list:
            await msg.answer("–ö–æ—Ñ–µ–π–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç!")
            return
        
        keyboard = get_coffee_catalog_keyboard(coffee_list)
        await msg.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:",
            reply_markup=keyboard
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –æ—Ç–∫—Ä—ã–ª –∫–∞—Ç–∞–ª–æ–≥ –∫–æ—Ñ–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–æ—Ñ–µ: {e}")
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(F.data == "coffee_catalog")
async def back_to_catalog(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–∞–ª–æ–≥—É –∫–æ—Ñ–µ"""
    try:
        with open(BOT_MIND_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            coffee_list = data.get("coffee_shop", [])
        
        keyboard = get_coffee_catalog_keyboard(coffee_list)
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ñ–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:",
            reply_markup=keyboard
        )
        await callback.message.delete()
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞!")
        await bot.send_message(callback.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞!")

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /coffeeshop –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫–æ—Ñ–µ"
    )
    await callback.message.delete()
    await callback.answer()

@dp.message(F.text)
async def message_handler(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = msg.from_user.id
    user = msg.from_user
    user_message = msg.text
    start_time = time.time()

    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {start_time}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª: {user_message}")
    
    conversation = await get_conversation(user_id) or {"user_info": {}, "messages": []}
    
    if not conversation.get("user_info"):
        conversation["user_info"] = {
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name
        }
        await save_conversation(user_id, conversation)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {conversation['user_info']}")
    
    await bot.send_chat_action(msg.chat.id, "typing")
    await update_chat_history(user_id, user_message)
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {time.time() - start_time} —Å–µ–∫")

    messages = conversation.get("messages", [])
    system_prompt = load_bot_mind()
    messages_for_ai = [{"role": "system", "content": system_prompt}] + [
        {"role": m["role"], "content": m["message"]} for m in messages[-20:]
    ]
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ –ò–ò —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º: {messages_for_ai}")
    
    try:
        completion = client.chat.completions.create(
            model="deepseek/deepseek-chat:free",
            messages=messages_for_ai,
            extra_headers={
                "HTTP-Referer": "https://github.com/your-repo",
                "X-Title": "Coffee Master Bot"
            }
        )
        ai_response = completion.choices[0].message.content
        logger.info(f"–ò–ò –æ—Ç–≤–µ—Ç–∏–ª: {ai_response}")
        
        await update_chat_history(user_id, ai_response, "assistant")
        await msg.answer(ai_response)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {time.time() - start_time} —Å–µ–∫")
    except Exception as e:
        logger.error(f"API Error: {e}")
        await msg.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query()
async def debug_callback(callback: CallbackQuery):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ callback-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {callback.data}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await load_conversations_to_cache()
    asyncio.create_task(periodic_save())
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await dp.start_polling(bot, state=FSMContext)

if __name__ == "__main__":
    asyncio.run(main())