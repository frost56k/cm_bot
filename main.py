import os
import sys
import re
import json
import logging
from datetime import datetime
from dotenv import load_dotenv
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from typing import Tuple

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("API-–∫–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω")
print(api_key)  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    stream=sys.stdout
)

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2"""
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return re.sub(r"([" + re.escape(escape_chars) + r"])", r"\\\1", text)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def load_bot_mind(filename: str = "bot_mind.json") -> str:
    try:
        with open(filename, "r", encoding="utf-8") as file:
            return file.read()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return ""

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
def load_conversations():
    if os.path.exists('conversations.json'):
        try:
            with open('conversations.json', 'r', encoding='utf-8') as file:
                return json.load(file)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
            return {}
    else:
        return {}

def save_conversations(conversations):
    with open('conversations.json', 'w', encoding='utf-8') as file:
        json.dump(conversations, file, ensure_ascii=False, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
def initialize_openai() -> Tuple[str, str]:
    api_key = os.getenv("OPENAI_API_KEY")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–¥–∞–Ω–∞
    if not api_key:
        raise ValueError("API-–∫–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    system_content = load_bot_mind()
    if not system_content:
        raise ValueError("–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
    
    return api_key, system_content

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
api_key, system_content = initialize_openai()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_name = update.message.from_user.first_name
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø ‚Äî –ö–æ—Ñ–µ –ú–∞—Å—Ç–µ—Ä, –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –∫–æ—Ñ–µ–º–∞—à–∏–Ω. üõ†Ô∏è\n\n"
        f"–ù–∞—à —á–∞—Ç-–±–æ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ï—Å–ª–∏ —É–≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫–∏, –ø–∏—à–∏—Ç–µ: coffeemasterbel@gmail.com\n\n"
        "üìç –ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏:\n"
        "üîπ Instagram: [@coffee1master](https://www.instagram.com/coffee1master/)\n"
        "üîπ TikTok: [@coffee1master](https://www.tiktok.com/@coffee1master)\n"
        "üîπ YouTube: [@Coffee1master](https://www.youtube.com/@Coffee1master)\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"
    )
    await update.message.reply_text(welcome_text, disable_web_page_preview=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    user_id = str(user.id)
    username = user.username or "NoUsername"
    first_name = user.first_name
    last_name = user.last_name or ""
    user_message = update.message.text
    timestamp = datetime.now().isoformat()

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({user_id}): {user_message}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø–µ—Ä–µ–ø–∏—Å–æ–∫
    conversations = load_conversations()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in conversations:
        conversations[user_id] = {
            "user_info": {
                "username": username,
                "first_name": first_name,
                "last_name": last_name
            },
            "messages": []
        }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conversations[user_id]["messages"].append({
        "role": "user",
        "message": user_message,
        "timestamp": timestamp
    })

    save_conversations(conversations)

    if not api_key or not system_content:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    loading_message = await update.message.reply_text("‚è≥ –ú–∞—Å—Ç–µ—Ä –¥—É–º–∞–µ—Ç...")

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    user_conversation = conversations[user_id]["messages"]

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
    conversation_history = []
    for msg in user_conversation:
        role = msg["role"]
        if role == "bot":
            role = "assistant"  # –ú–µ–Ω—è–µ–º 'bot' –Ω–∞ 'assistant'
        conversation_history.append({
            "role": role,
            "content": msg["message"]
        })

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ
    conversation_history.insert(0, {"role": "system", "content": system_content})

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏
    max_history_length = 20  # –ù–∞—Å—Ç—Ä–æ–π —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if len(conversation_history) > max_history_length:
        conversation_history = [conversation_history[0]] + conversation_history[-(max_history_length - 1):]

    try:
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {api_key}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://api.telegram.org/bot<YOUR_BOT_TOKEN>/getUpdates",
                "X-Title": "Coffee Master Bot"
            },
            data=json.dumps({
                "model": "deepseek/deepseek-chat:free",
                "messages": conversation_history,
                "temperature": 0.5,
                "max_tokens": 700
            })
        )

        response_json = response.json()
        print(response_json)
        if response_json.get('choices'):
            response_text = response_json['choices'][0]['message']['content']
        else:
            response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response_text}")

    except Exception as api_error:
        logging.error(f"–û—à–∏–±–∫–∞ API: {api_error}")
        response_text = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    await loading_message.delete()
    response_escaped = escape_markdown_v2(response_text)
    await update.message.reply_text(response_escaped, parse_mode="MarkdownV2")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
    timestamp = datetime.now().isoformat()
    conversations[user_id]["messages"].append({
        "role": "assistant",
        "message": response_text,
        "timestamp": timestamp
    })

    save_conversations(conversations)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        logging.error("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    application = Application.builder().token(bot_token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
